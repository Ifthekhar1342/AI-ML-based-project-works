# -*- coding: utf-8 -*-
"""Project 115.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L8Fqe_vFLG_jhxtyj5xp6idBLQoGfuG6
"""

!pip install ultralytics

from ultralytics import YOLO
import cv2
import os
import random
import torch
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab.patches import cv2_imshow
from PIL import Image

from google.colab import drive
drive.mount('/content/drive')

"""**Dataset**"""

images_dir = "/content/drive/MyDrive/Images_data/train/images"

for file in os.listdir(images_dir)[:7]:
  img = cv2.imread(os.path.join(images_dir, file))
  cv2_imshow(img)

# Unique objects in images
with open('/content/drive/MyDrive/Images_data/data_1.yaml', 'r') as f:
  data = f.read()
  print(data)

# Image objects detection
image_train_label = "/content/drive/MyDrive/Images_data/train/labels"

def load_labels(image_files, image_train_labels):
  label_file = os.path.splitext(image_files)[0] + ".txt"
  label_path = os.path.join(image_train_label, label_file)

  with open(label_path, "r") as f:
    labels = f.read().strip().split("\n")

  return labels

def image_object_detection(ax, image, labels):
  for label in labels:
    if len(label.split()) != 5:
      continue
    class_id, x_center, y_center, width, height = map(float, label.split())
    x_min = int((x_center - width / 2) * image.shape[1])
    y_min = int((y_center - height / 2) * image.shape[0])
    x_max = int((x_center + width / 2) * image.shape[1])
    y_max = int((y_center + height / 2) * image.shape[0])
    cv2.rectangle(image, (x_min, y_min), (x_max, y_max), (0, 255, 0), 3)

  ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
  ax.axis("off")

# Plot the object detection
images_dir = "/content/drive/MyDrive/Images_data/train/images"
image_train_label = "/content/drive/MyDrive/Images_data/train/labels"

image_all_file = os.listdir(images_dir)
random_image = random.sample(image_all_file, 16)
fig, axs = plt.subplots(4, 4, figsize=(20, 20))

for i, image_file in enumerate(random_image):
  row, col = divmod(i, 4)
  image_path = os.path.join(images_dir, image_file)
  image = cv2.imread(image_path)
  labels = load_labels(image_file, image_train_label)
  image_object_detection(axs[row, col], image, labels)

plt.tight_layout()
plt.show()

"""**YOLO v8 model implementation**"""

# Model training for 50 epochs
!yolo task= detect mode= train model= yolov8n.pt data= /content/drive/MyDrive/Images_data/data_1.yaml epochs=50 batch=16 imgsz=640

train_out_dir = "/content/runs/detect/train"
os.listdir(train_out_dir)

# P_curve, confusion_matrix, PR_curve, F1_curve, R_curve
image_files = ['P_curve.png', 'PR_curve.png', 'F1_curve.png', 'R_curve.png', 'confusion_matrix.png']

for file in image_files:
  img = cv2.imread(os.path.join(train_out_dir, file))
  cv2_imshow(img)

# model performance
df = pd.read_csv("/content/runs/detect/train/results.csv")
df.head()

df.columns

# Training metrics and loss
df.columns = df.columns.str.strip()
fix, axs = plt.subplots(nrows=5, ncols=2, figsize=(20, 20))

# Plotting the Columns
sns.lineplot(x='epoch', y='train/box_loss', data=df, ax=axs[0,0])
sns.lineplot(x='epoch', y='train/cls_loss', data=df, ax=axs[0,1])
sns.lineplot(x='epoch', y='train/dfl_loss', data=df, ax=axs[1,0])
sns.lineplot(x='epoch', y='metrics/precision(B)', data=df, ax=axs[1,1])
sns.lineplot(x='epoch', y='metrics/recall(B)', data=df, ax=axs[2,0])
sns.lineplot(x='epoch', y='metrics/mAP50(B)', data=df, ax=axs[2,1])
sns.lineplot(x='epoch', y='metrics/mAP50-95(B)', data=df, ax=axs[3,0])
sns.lineplot(x='epoch', y='val/box_loss', data=df, ax=axs[3,1])
sns.lineplot(x='epoch', y='val/cls_loss', data=df, ax=axs[4,0])
sns.lineplot(x='epoch', y='val/dfl_loss', data=df, ax=axs[4,1])

# Titles and labels
axs[0,0].set(title='Train box loss')
axs[0,1].set(title='Train class loss')
axs[1,0].set(title='Train DFL loss')
axs[1,1].set(title='Metrics precision(B)')
axs[2,0].set(title='Metrics recall(B)')
axs[2,1].set(title='Metrics mAP50(B)')
axs[3,0].set(title='Metrics mAP50-95(B)')
axs[3,1].set(title='Validation box loss')
axs[4,0].set(title='Validation classloss')
axs[4,1].set(title='Validation DFL loss')

plt.suptitle("Training metrics and loss")
plt.tight_layout()
plt.show()

# Test Evaluation
!yolo task = detect mode = predict model = /content/runs/detect/train/weights/best.pt source = /content/drive/MyDrive/Images_data/valid/images conf=0.25

# Object detection
test_dir = "/content/runs/detect/predict"
test_list = os.listdir(test_dir)
random.shuffle(test_list)

for file in test_list[:30]:
  img = cv2.imread(os.path.join(test_dir, file))
  cv2_imshow(img)